<?php
/**
 * Initialize all the things.
 */



function pkcs5_pad($text, $blocksize)
{
    $pad = $blocksize - (strlen($text) % $blocksize);
    return $text . str_repeat(chr($pad), $pad);
}

function pkcs5_unpad($text)
{
    $pad = ord($text{strlen($text) - 1});
    if ($pad > strlen($text))
        return false;
    if (strspn($text, chr($pad), strlen($text) - $pad) != $pad)
        return false;
    return substr($text, 0, -1 * $pad);
}

//encrypt function to send encrypted data to weebox api
function encrypt($plainText, $key)
{
    $secretKey  = hex2bin(md5($key));
    $initVector = pack("C*", 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f);
    /* Open module and Create IV (Intialization Vector) */
    $openMode   = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', 'cbc', '');
    $blockSize  = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, 'cbc');
    $plainPad   = pkcs5_pad($plainText, $blockSize);
    /* Initialize encryption handle */
    if (mcrypt_generic_init($openMode, $secretKey, $initVector) != -1)
    {

    }
    /* Encrypt data */
    $encryptedText = mcrypt_generic($openMode, $plainPad);
    mcrypt_generic_deinit($openMode);
    return bin2hex($encryptedText);
}

//encrypt function ends here
//decrypt function to decrypt data coming back from weebox api
function decrypt($encryptedText, $key)
{
    $secretKey     = hex2bin(md5($key));
    $initVector    = pack("C*", 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f);
    $encryptedText = hex2bin($encryptedText);
    /* Open module, and create IV */
    $openMode      = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', 'cbc', '');
    mcrypt_generic_init($openMode, $secretKey, $initVector);
    $decryptedText = mdecrypt_generic($openMode, $encryptedText);
// Drop nulls from end of string $decryptedText = rtrim($decryptedText, "\0");
    // Returns "Decrypted string: some text here"
    mcrypt_generic_deinit($openMode);
    return $decryptedText;
}

/* unique_multidim_array */

function unique_multidim_array($array, $key)
{
    $temp_array = array();
    $i          = 0;
    $key_array  = array();

    foreach ($array as $val)
    {
        if (!in_array($val[$key], $key_array))
        {
            $key_array[$i]  = $val[$key];
            $temp_array[$i] = $val;
        }
        $i++;
    }
    return $temp_array;
}

//Making jQuery Google API
function modify_jquery()
{
    if (!is_admin())
    {
        // comment out the next two lines to load the local copy of jQuery
        wp_deregister_script('jquery');
        wp_register_script('jquery', 'https://ajax.googleapis.com/ajax/libs/jquery/2.2.1/jquery.min.js', false, '2.2.1');
        wp_enqueue_script('jquery');
    }
}

add_action('init', 'modify_jquery');


/* Extract Integer from String */
function extract_numbers($string)
{
    preg_match_all('/([\d]+)/', $string, $match);

    return $match[0];
}

function the_array_search($find, $items)
{
    foreach ($items as $key => $value)
    {
        $current_key = $key;
        if (
                $find === $value
                OR (
                is_array($value) && the_array_search($find, $value) !== false
                )
        )
        {
            return $current_key;
        }
    }
    return false;
}

function truncate($text, $chars = 25)
{
    $text = $text . " ";
    $text = substr($text, 0, $chars);
    $text = substr($text, 0, strrpos($text, ' '));
    $text = $text . "...";
    return $text;
}


//add_filter( 'jcmc_custom_section','jc_custom_section' );
function jc_custom_section($sections)
{
    $paymentform         = "madhav";
    $sections['payment'] = array(
        'content'   => $paymentform, // content of the section
        'logged_in' => true        // visible to non logged in customers
    );
    return $sections;
}

/**
 * Generate a string of random characters
 *
 * @param array $args   The arguments to use for this function
 * @return string|null  The random string generated by this function (only 'if($args['echo'] === false)')
 */
function generateRandomString($length = 6)
{
    $characters       = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $charactersLength = strlen($characters);
    $randomString     = '';
    for ($i = 0; $i < $length; $i++)
    {
        $randomString .= $characters[rand(0, $charactersLength - 1)];
    }
    return $randomString;
}

/* Run api to get test for selfiscan */

function get_selfiscantest()
{
    $selfiscan_test      = wp_remote_get('http://mywheebox.com:8091/wheeboxApi/testsDetail/0017000/');
    $selfiscan_test_data = $selfiscan_test['body'];
    update_option('selfiscan_test', $selfiscan_test_data);
}

/* convert object array to array */

function stdToArray($obj)
{
    $reaged = (array) $obj;
    foreach ($reaged as $key => &$field)
    {
        if (is_object($field))
            $field = stdToArray($field);
    }
    return $reaged;
}

/* population dropdown for test */

function get_dropdownlist_selfiscantest()
{
    $testJson  = get_option('selfiscan_test');
    $testArray = (json_decode($testJson));
    $b         = stdToArray($testArray);

    //print_r($b);

    //echo "<pre>";
    //print_r($b);
}

add_filter('gform_field_validation', 'validate_phone', 10, 4);

function validate_phone($result, $value, $form, $field)
{
    $pattern = "/^\d{10,}$/";
    if ($field->type == 'phone' && $value == '')
    {
        $result['is_valid'] = false;
        $result['message']  = 'This field is required';
    }
    elseif ($field->type == 'phone' && !preg_match($pattern, $value))
    {
        $result['is_valid'] = false;
        $result['message']  = 'Please enter a valid phone number';
    }

    $emailpattern = "/^[A-z0-9_.\-]+[@][A-z0-9_\-]+([.][A-z0-9_\-]+)+[A-z]{1,4}$/";
    if ($field->type == 'email' && $value == '')
    {
        $result['is_valid'] = false;
        $result['message']  = 'This field is required';
    }
    elseif ($field->type == 'email' && !preg_match($emailpattern, $value))
    {
        $result['is_valid'] = false;
        $result['message']  = 'Please enter a valid Email';
    }

    return $result;
}

function get_google_refer_contacts()
{

    session_start();

//include google api library
    require_once 'google-api/src/Google/autoload.php'; // or wherever autoload.php is located
//Create a Google application in Google Developers Console for obtaining your Client id and Client secret.
// https://www.design19.org/blog/import-google-contacts-with-php-or-javascript-using-google-contacts-api-and-oauth-2-0/
// Your redirect uri should be on a online server. Localhost will not work.
//Important : Your redirect uri should be added in Google Developers Console , in your Authorized redirect URIs
//Declare your Google Client ID, Google Client secret and Google redirect uri in  php variables
    $google_client_id     = '716526974564-4f09o8dcogcrsdu09qtt1sipunnde4hj.apps.googleusercontent.com';
    $google_client_secret = 'OwZqPQ7c0JV0KsV073oAHNU4';
    $google_redirect_uri  = get_bloginfo('url') . '/edit-profile/';

//setup new google client
    $client          = new Google_Client();
    $client->setApplicationName('Talentedge');
    $client->setClientid($google_client_id);
    $client->setClientSecret($google_client_secret);
    $client->setRedirectUri($google_redirect_uri);
    $client->setAccessType('online');
    $client->setScopes('https://www.google.com/m8/feeds');
    $googleImportUrl = $client->createAuthUrl();

//curl function
    function curl($url, $post = "")
    {
        $curl      = curl_init();
        $userAgent = 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)';
        curl_setopt($curl, CURLOPT_URL, $url);
        //The URL to fetch. This can also be set when initializing a session with curl_init().
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
        //TRUE to return the transfer as a string of the return value of curl_exec() instead of outputting it out directly.
        curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 5);
        //The number of seconds to wait while trying to connect.
        if ($post != "")
        {
            curl_setopt($curl, CURLOPT_POST, 5);
            curl_setopt($curl, CURLOPT_POSTFIELDS, $post);
        }
        curl_setopt($curl, CURLOPT_USERAGENT, $userAgent);
        //The contents of the "User-Agent: " header to be used in a HTTP request.
        curl_setopt($curl, CURLOPT_FOLLOWLOCATION, TRUE);
        //To follow any "Location: " header that the server sends as part of the HTTP header.
        curl_setopt($curl, CURLOPT_AUTOREFERER, TRUE);
        //To automatically set the Referer: field in requests where it follows a Location: redirect.
        curl_setopt($curl, CURLOPT_TIMEOUT, 10);
        //The maximum number of seconds to allow cURL functions to execute.
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
        //To stop cURL from verifying the peer's certificate.
        $contents = curl_exec($curl);
        curl_close($curl);
        return $contents;
    }

//google response with contact. We set a session and redirect back
    if (isset($_GET['code']))
    {
        $auth_code               = $_GET["code"];
        $_SESSION['google_code'] = $auth_code;
    }


    /*
      Check if we have session with our token code and retrieve all contacts, by sending an authorized GET request to the following URL : https://www.google.com/m8/feeds/contacts/default/full
      Upon success, the server responds with a HTTP 200 OK status code and the requested contacts feed. For more informations about parameters check Google API contacts documentation
     */
    if (isset($_SESSION['google_code']))
    {
        $auth_code   = $_SESSION['google_code'];
        $max_results = 5000;
        $fields      = array(
            'code'          => urlencode($auth_code),
            'client_id'     => urlencode($google_client_id),
            'client_secret' => urlencode($google_client_secret),
            'redirect_uri'  => urlencode($google_redirect_uri),
            'grant_type'    => urlencode('authorization_code')
        );
        $post        = '';
        foreach ($fields as $key => $value)
        {
            $post .= $key . '=' . $value . '&';
        }
        $post = rtrim($post, '&');


        $result      = curl('https://accounts.google.com/o/oauth2/token', $post);
        $response    = json_decode($result);
        $accesstoken = $response->access_token;
        $url         = 'https://www.google.com/m8/feeds/contacts/default/full?max-results=' . $max_results . '&alt=json&v=3.0&oauth_token=' . $accesstoken;
        $xmlresponse = curl($url);
        $contacts    = json_decode($xmlresponse, true);

        //deg ($contacts['feed']['entry']);

        $return = array();
        if (!empty($contacts['feed']['entry']))
        {
            foreach ($contacts['feed']['entry'] as $contact)
            {

                //$contactidlink = explode('/',$contact['id']['$t']);
                //$contactId = end($contactidlink);
                //retrieve user photo
                if (isset($contact['link'][0]['href']))
                {

                    $url = $contact['link'][0]['href'];

                    $url = $url . '&access_token=' . urlencode($accesstoken);

                    $curl = curl_init($url);

                    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
                    curl_setopt($curl, CURLOPT_TIMEOUT, 15);
                    curl_setopt($curl, CURLOPT_VERBOSE, true);

                    $image = curl_exec($curl);
                    curl_close($curl);


                    //echo '<img src="data:image/jpeg;base64,'.base64_encode( $image ).'" />';
                }

                //retrieve Name + email and store into array
                $return[] = array(
                    'name'  => $contact['title']['$t'],
                    'email' => $contact['gd$email'][0]['address'],
                    'image' => $image
                );
            }
        }

        $google_contacts = $return;

        unset($_SESSION['google_code']);

//Now that we have the google contacts stored in an array, display all in a table
        //Now that we have the google contacts stored in an array, display all in a table
        if (!empty($google_contacts))
        {
            ?>
            <div class="text-right"><img id="loading_image_invite" src="<?php echo get_template_directory_uri(); ?>/assets/images/ajax-loader.gif"></div>
            <div class="text-right email_sent_invite">Email sent</div>
            <div class="send_invitation">
                <div class="wrap_invitation">
                    <div class="submitInvite">
                        <input class="btn-normal google_invite" type="submit" name="google_invite" value="Invite Friends">
                    </div>
                    <div class="list_invite">
                        <div class="selectall">
                            <input type="checkbox" id="select_all"/>
                            <label for="select_all">Select All</label>
                        </div>
                        <div class="search-invite-gplus pull-right">
                            <input id="search-hidden-mode-google" name="search" placeholder="Search Users" type="text" data-list=".invite_google_contacts" data-nodata="No results found" autocomplete="off">
                        </div>
                        <ul class="vertical invite_google_contacts">
            <?php
            $i = 1;
            foreach ($google_contacts as $contact)
            {
                ?>
                                <li class="in-users">
                                    <input id="<?php echo $i; ?>" class="checkbox" type="checkbox" name="invite_contacts" value="<?php echo $contact['email'] ?>">
                <?php
                echo '<label for="' . $i . '">' . $contact['name'] . '</label>';
                echo '<span>' . $contact['email'] . '</span>';
                ?>
                                </li>
                <?php $i++;
            } ?>
                        </ul>
                    </div>

                </div>
            </div>
            <?php
        }
    }
    ?>
    <div class="googleplus1" style="display:none;">
        <a class="gluscontact" href="<?php echo $googleImportUrl; ?>">
            <div class="google_plus">Google Connect<i class="userpro-icon-google-plus fa pull-right"></i></div>
        </a>
    </div>
<?php
}

add_action('wp_ajax_send_inviteemail_ajax', 'send_inviteemail_ajax', 16);
add_action('wp_ajax_nopriv_send_inviteemail_ajax', 'send_inviteemail_ajax', 16);

function send_inviteemail_ajax()
{
    $user_id             = get_current_user_id();
    $user_info           = get_userdata($user_id);
    $user_emailid        = $user_info->user_email;
    $user_first_name     = $user_info->first_name;
    $user_reference_code = get_user_meta($user_id, 'user_reference_code', true);
    $siteUrl             = "https://talentedge.in/";
    //$siteUrl =
    $headers             = array('Content-Type: text/html; charset=UTF-8',
        'From:  Talentedge <admission@talentedge.in>', 'Disposition-Notification-To: ' . $user_email . '\n');
    $subject             = 'Your Friend ' . $user_first_name . ' wants you to check out Talentedge';
    $existemailArray     = array();

    if (isset($_POST['gmaildata']))
    {
        $gmailInfo = $_POST['gmaildata'];
        $qry_args  = array(
            'post_status'    => 'publish', // optional
            'post_type'      => 'referrals', // Change to match your post_type
            'posts_per_page' => -1, // ALL posts
        );
        $the_query = new WP_Query($qry_args);
        if ($the_query->have_posts())
        {
            while ($the_query->have_posts()) : $the_query->the_post();
                /* updating the status */
                $post_id           = get_the_ID();
                $existemail        = get_field('user_email', $post_id);
                $existemailArray[] = $existemail;
            endwhile;
        }



        foreach ($gmailInfo as $email_gplus)
        {
            if (!in_array($email_gplus['email'], $existemailArray))
            {

                $my_post = array(
                    'post_title'  => $email_gplus['email'],
                    'post_status' => 'publish',
                    'post_type'   => 'referrals',
                    'post_author' => 1,
                    'meta_input'  => array(
                        'user_name'        => $email_gplus['name'],
                        'user_email'       => $email_gplus['email'],
                        'referred_by'      => $user_emailid,
                        'referred_by_code' => $user_reference_code,
                        'referred_by_id'   => $user_id,
                        'status'           => 'Pending'
                    ),
                );

                $inserpost_id = wp_insert_post($my_post);

                if ($inserpost_id)
                {

                    $body = '<p> Hey ' . $email_gplus['name'] . ', <br><br>Your friend ' . $user_first_name . ' (' . $user_emailid . ') recently visited
              <a href= ' . $siteUrl . '?utm_source=AutoEmailer&utm_campaign=RefferalInvitation&utm_medium=Email>Talentedge</a>
              to explore our wide range of online certification courses from premium institutes like IIM, XLRI, MICA & SP Jain.
              Over 1000 professionals like you chose us to enrol in courses in Marketing, Brand Management, HR,
              Sales and Analytics for a career booster.<br><br>Have a look at our current course catalogue to find a course best suited for your career.
            <a href=' . $siteUrl . 'browse-courses/>Browse Courses<a><br><br>Thanks,<br>Team TalentEdge<br>www.talentedge.in';

                    $result = wp_mail($email_gplus['email'], $subject, $body, $headers);


                    $subjectReferrer = "Your Friend(s) Have been invited to Talentedge!";
                    $bodyreferrer    = '<p>Dear ' . $user_first_name . ', <br><br>Thank you for taking time to refer your friends to us. We will let your friend(s) know about
            <a href="https://talentedge.in/?utm_source=AutoEmailer&amp;utm_campaign=ReferralThankYou&amp;utm_medium=Email">Talentedge</a> and introduce our
            range of certification programs with them.<br><br>We will inform you if your friend enrols for a course. Not to mention the resulting reward because
            of a successful enrolment.<br><br>Meanwhile, increase your chances of reward by referring more friends <a class="btn-normal " href="https://talentedge.in/edit-profile/#referEarn">Refer &amp; Earn</a>
            <br><br>Thanks,<br>Team TalentEdge<br>www.talentedge.in';
                    wp_mail($user_emailid, $subjectReferrer, $bodyreferrer, $headers);
                }
            }
        }
    }
    return $result;
}

add_action('wp_ajax_verifyemail_ajax', 'verifyemail_ajax', 16);
add_action('wp_ajax_nopriv_verifyemail_ajax', 'verifyemail_ajax', 16);

function verifyemail_ajax()
{
    //$user_id =  get_current_user_id();
    //$user_info = get_userdata($user_id);
    //$user_emailid =  $user_info->user_email;
    //$user_first_name =  $user_info->first_name;
    $random_verified = generateRandomString();
    $siteUrl         = get_bloginfo("url") . '?verified_user=' . $random_verified;
    //$user_reference_code = get_user_meta($user_id,'user_reference_code',true);
    $headers         = array('Content-Type: text/html; charset=UTF-8',
        'From:  Talentedge <admission@talentedge.in>', 'Disposition-Notification-To: ' . $user_email . '\n');
    $subject         = "Please verif your email";
    $body            = '<p> Hi,<br><br> ' . $user_first_name . ' Please activate the email by click on below link <a href="' . $siteUrl . '">Talentedge</a>
              <br></br>Thanks,<br>Team TalentEdge';

    if (isset($_POST['postemail']))
    {
        $result = wp_mail($_POST['postemail'], $subject, $body, $headers);
    }
    return $result;
}


function mail_attachment($filename, $path, $mailto, $from_mail, $from_name, $replyto, $subject, $message)
{
    $file      = $path . $filename;
    $file_size = filesize($file);
    $handle    = fopen($file, "r");
    $content   = fread($handle, $file_size);
    fclose($handle);
    $content   = chunk_split(base64_encode($content));
    $uid       = md5(uniqid(time()));
    $header    = "From: " . $from_name . " <" . $from_mail . ">\r\n";
    $header    .= "Reply-To: " . $replyto . "\r\n";
    $header    .= "MIME-Version: 1.0\r\n";
    $header    .= "Content-Type: multipart/mixed; boundary=\"" . $uid . "\"\r\n\r\n";
    $header    .= "This is a multi-part message in MIME format.\r\n";
    $header    .= "--" . $uid . "\r\n";
    $header    .= "Content-type:text/plain; charset=iso-8859-1\r\n";
    $header    .= "Content-Transfer-Encoding: 7bit\r\n\r\n";
    $header    .= $message . "\r\n\r\n";
    $header    .= "--" . $uid . "\r\n";
    $header    .= "Content-Type: application/octet-stream; name=\"" . $filename . "\"\r\n"; // use different content types here
    $header    .= "Content-Transfer-Encoding: base64\r\n";
    $header    .= "Content-Disposition: attachment; filename=\"" . $filename . "\"\r\n\r\n";
    $header    .= $content . "\r\n\r\n";
    $header    .= "--" . $uid . "--";
    if (mail($mailto, $subject, "", $header))
    {
        echo "mail send ... OK"; // or use booleans here
    }
    else
    {
        echo "mail send ... ERROR!";
    }
}


/* CRM Functons Starts */

function rand_string($length)
{

    $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    return substr(str_shuffle($chars), 0, $length);
}

function expl($str, $charlist = '|')
{
    if (!$charlist)
        return($str);
    $char   = $charlist[0];
    $matrix = explode($char, $str);
    for ($i = 0; $i < sizeof($matrix); $i++)
    {
        $matrix[$i] = expl($matrix[$i], substr($charlist, 1));
    }
    return($matrix);
}

function multi_implode(array $glues, array $array)
{
    $out = "";
    $g   = array_shift($glues);
    $c   = count($array);
    $i   = 0;
    foreach ($array as $val)
    {
        if (is_array($val))
        {
            $out .= multi_implode($glues, $val);
        }
        else
        {
            $out .= (string) $val;
        }
        $i++;
        if ($i < $c)
        {
            $out .= $g;
        }
    }
    return $out;
}

function fix_json($j)
{
    $j = trim($j);
    $j = ltrim($j, '(');
    $j = rtrim($j, ')');
    $a = preg_split('#(?<!\\\\)\"#', $j);
    for ($i = 0; $i < count($a); $i += 2)
    {
        $s     = $a[$i];
        $s     = preg_replace('#([^\s\[\]\{\}\:\,]+):#', '"\1":', $s);
        $a[$i] = $s;
    }
    //var_dump($a);
    $j = implode('"', $a);
    //var_dump( $j );
    return $j;
}

function numberTowords($number)
{
    $my_number = $number;

    if (($number < 0) || ($number > 999999999))
    {
        throw new Exception("Number is out of range");
    }
    $Kt     = floor($number / 10000000); /* Koti */
    $number -= $Kt * 10000000;
    $Gn     = floor($number / 100000);  /* lakh  */
    $number -= $Gn * 100000;
    $kn     = floor($number / 1000);     /* Thousands (kilo) */
    $number -= $kn * 1000;
    $Hn     = floor($number / 100);      /* Hundreds (hecto) */
    $number -= $Hn * 100;
    $Dn     = floor($number / 10);       /* Tens (deca) */
    $n      = $number % 10;               /* Ones */

    $res = "";

    if ($Kt)
    {
        $res .= numberTowords($Kt) . " Carore ";
    }
    if ($Gn)
    {
        $res .= numberTowords($Gn) . " Lakh";
    }

    if ($kn)
    {
        $res .= (empty($res) ? "" : " ") .
                numberTowords($kn) . " Thousand";
    }

    if ($Hn)
    {
        $res .= (empty($res) ? "" : " ") .
                numberTowords($Hn) . " Hundred";
    }

    $ones = array("", "One", "Two", "Three", "Four", "Five", "Six",
        "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen",
        "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eightteen",
        "Nineteen");
    $tens = array("", "", "Twenty", "Thirty", "Fourty", "Fifty", "Sixty",
        "Seventy", "Eigthy", "Ninety");

    if ($Dn || $n)
    {
        if (!empty($res))
        {
            $res .= " and ";
        }

        if ($Dn < 2)
        {
            $res .= $ones[$Dn * 10 + $n];
        }
        else
        {
            $res .= $tens[$Dn];

            if ($n)
            {
                $res .= " " . $ones[$n];
            }
        }
    }

    if (empty($res))
    {
        $res = "zero";
    }

    return $res;
}

function create_selfi_user()
{
    ob_start();
    $user_id    = get_current_user_id();
    $filterData = new stdClass();

    $timestamp = strtotime($_POST['dob']);
    $new_date  = date('Y-m-d', $timestamp);

    $filterData->firstName = $_POST['fname'];

    $filterData->lastName = $_POST['lname'];

    $filterData->loginId = $_POST['email'];
    $filterData->dob     = $new_date;
    $filterData->gender  = $_POST['gender'];
    $filterData->city    = $_POST['city'];
    $filterData->state   = $_POST['state'];
    $filterData->country = $_POST['country'];
    $filterData          = json_encode($filterData);
//sprint_r($filterData);
    $key                 = 'CbddmBz6lmP47467';
    $secretKey           = hex2bin(md5($key));
    $initVector          = pack("C*", 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f);
    /* Open module and Create IV (Intialization Vector) */
    $openMode            = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', 'cbc', '');
    $blockSize           = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, 'cbc');
    $plainPad            = pkcs5_pad($filterData, $blockSize);
    /* Initialize encryption handle */
    if (mcrypt_generic_init($openMode, $secretKey, $initVector) != -1)
    {

    }
    /* Encrypt data */
    $encryptedText = mcrypt_generic($openMode, $plainPad);
    mcrypt_generic_deinit($openMode);
    $filterData    = bin2hex($encryptedText);
    $ch            = curl_init();
    $token         = "2eW5fbMNJQLTtMn";
    $headers       = array('Content-Type: application/json', 'Accept:
application/json;charset=utf-8', 'accessToken: ' . $token);
    curl_setopt($ch, CURLOPT_URL, "http://mywheebox.com/wheeboxApi/registration/0017000?val=" . $filterData)
    ;
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('accessToken: ' . $token . ''));
    $server_output = curl_exec($ch);
    curl_close($ch);
//print_r($server_output);
    $secretKey     = hex2bin(md5($key));
    $initVector    = pack("C*", 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f);
    $encryptedText = hex2bin($server_output);
    /* Open module, and create IV */
    $openMode      = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', 'cbc', '');
    mcrypt_generic_init($openMode, $secretKey, $initVector);
    $decryptedText = mdecrypt_generic($openMode, $encryptedText);
// Drop nulls from end of string $decryptedText = rtrim($decryptedText, "\0");
    // Returns "Decrypted string: some text here"
    mcrypt_generic_deinit($openMode);

    if (preg_match("/\"status\":\"error\"/", $decryptedText, $match))
    {
        $data = array('email' => $_POST['email'], 'status' => 1);
    }
    else
    {
        $data = array('email' => $_POST['email'], 'status' => 0);
        update_user_meta($user_id, 'selfiscan', 1);
    }
    wp_send_json($data);
    die();
}

add_action('wp_ajax_get_selfi_key', 'get_selfi_key', 10);

//add_action('wp_ajax_nopriv_create_selfi_user', 'create_selfi_user', 10);

function get_selfi_key()
{
    ob_start();
    $key     = 'CbddmBz6lmP47467';
    $user_id = get_current_user_id();
    $email   = get_user_meta($customer_id, 'billing_email', true);
    //print_r($filterData);
    //$str = $filterData->domain.'/'.$filterData->testName.'/'.$filterData->emailId.'/OSR';
    $encryptDomain   = encrypt('Interest Test', $key);
    $encryptTestName = encrypt('Selfie Scan', $key);
    $encryptEmail    = encrypt($email, $key);
    $encryptOSR      = encrypt('OSR', $key);
    $encryptData     = $encryptDomain . '/' . $encryptTestName . '/' . $encryptEmail . '/' . $encryptOSR;
    //echo 'Encrypt Data:<br>';
    //print_r($encryptData);


    $ch            = curl_init();
    $token         = "2eW5fbMNJQLTtMn";
    $headers       = array('Content-Type: application/json', 'Accept:
      application/json;charset=utf-8', 'accessToken: ' . $token);
    curl_setopt($ch, CURLOPT_URL, "http://mywheebox.com/wheeboxApi/testlink/0017000/" . $encryptData)
    ;
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('accessToken: ' . $token . ''));
    $server_output = curl_exec($ch);
    curl_close($ch);

    //echo 'Server Output:<br>';
    //print_r($server_output);
    $decryptData = decrypt($server_output, $key);
    //echo 'Decrypt Data:<br>';
    //print_r($decryptData);
    //$fdata=json_decode( preg_replace('/\u0005/', '', $decryptData),true );
    $fdata = json_decode($decryptData);
    //echo 'Data after json decode:<br>';
    //print_r($fdata);

    if (preg_match("/\"status\":\"error\"/", $decryptedText, $match))
    {
        $data = array('email' => $_POST['email'], 'status' => 1);
    }
    else
    {
        $data = array('email' => $_POST['email'], 'status' => 0);
    }


    wp_send_json($data);
    die();
}

add_filter("gform_field_validation_15_8", 'validate_tcs', 10, 4);

function validate_tcs($result, $value, $form, $field)
{
    // Convert the checkbox input name value (returned as part of "field")
    // into the "underscored" ID version which is found in the $_POST
    foreach ($field['inputs'] as $input)
    {
        $input_post_value = 'input_' . str_replace('.', '_', $input['id']);

        // Validate the value
        if (!isset($_POST[$input_post_value]))
        {
            $result["is_valid"] = false;
            $result["message"]  = "You must accept <em>all</em> of the Terms and Conditions";
        }
    }

    return $result;
}

add_filter("gform_field_validation_16_8", 'validate_tcs_16', 10, 4);

function validate_tcs_16($result, $value, $form, $field)
{
    // Convert the checkbox input name value (returned as part of "field")
    // into the "underscored" ID version which is found in the $_POST
    foreach ($field['inputs'] as $input)
    {
        $input_post_value = 'input_' . str_replace('.', '_', $input['id']);

        // Validate the value
        if (!isset($_POST[$input_post_value]))
        {
            $result["is_valid"] = false;
            $result["message"]  = "You must accept <em>all</em> of the Terms and Conditions";
        }
    }

    return $result;
}

add_action('admin_head', 'addcustomstyle');

function addcustomstyle() {
  echo '<style>
   .sumitbhalla #dashboard-widgets .postbox {display:none}
   .sumitbhalla #dashboard-widgets .postbox#woocommerce_dashboard_recent_reviews {display:block!important}
   .sumitbhalla #dashboard-widgets .postbox#woocommerce_dashboard_status {display:block!important}
   .sumitbhalla #adminmenu li.menu-top-first,.sumitbhalla #adminmenu li.menu-top , .sumitbhalla  #wp-admin-bar-comments, .sumitbhalla  #wp-admin-bar-new-content, .sumitbhalla  #wp-admin-bar-wpseo-menu, .sumitbhalla  #wp-admin-bar-gform-forms {display:none}
   .sumitbhalla #adminmenu li#menu-posts-shop_order {display:block}
   .sumitbhalla #adminmenu li#menu-posts-referrals {display:block}
   .sumitbhalla #adminmenu li#toplevel_page_wc-reports {display:block}
   .sumitbhalla #adminmenu li#menu-users {display:block}
   .sumitbhalla #adminmenu li#menu-dashboard {display:block}

   .seo-team #adminmenu li#toplevel_page_download_lead_report {display:none}
   .seo-team #adminmenu li#toplevel_page_order-report-download {display:none}
  </style>';
}





add_filter('acf/update_value','te_update_billing',99,3);
function te_update_billing( $value, $post_id, $field  ) {
	$stringArray = explode(_, $post_id);
    $user_id     = $stringArray[1];

	if($post_id=='user_'. $user_id){
		if($field['name']=='first_name'){
			$old=get_user_meta($user_id, 'billing_first_name',true);
			if(!$old || $old!=$value){
				update_user_meta($user_id,'billing_first_name',$value);
			}

		}
		if($field['name']=='last_name'){
			$old=get_user_meta($user_id, 'billing_last_name',true);
			if(!$old || $old!=$value){
				update_user_meta($user_id,'billing_last_name',$value);
			}

		}
		if($field['name']=='phone_number'){
			$old=get_user_meta($user_id, 'billing_phone',true);
			if(!$old || $old!=$value){
				update_user_meta($user_id,'billing_phone',$value);
			}

		}

	}
	return $value;

}

add_action('init', 'trackSources');

function trackSources(){

    //Tracking visit source for form
    //$Data = $_COOKIE['queryString'];


/*	$data = $_COOKIE['queryString'];

 	$queryString       = array(
    'utm_source'   => ((isset($_GET['utm_source']))? $_GET['utm_source'] :$data['utm_source']),
    'utm_medium'   => ((isset($_GET['utm_medium']))? $_GET['utm_medium'] :$data['utm_medium']),
    'utm_campaign' => ((isset($_GET['utm_campaign']))? $_GET['utm_campaign'] :$data['utm_campaign']),
    'utm_term'     => ((isset($_GET['utm_term']))? $_GET['utm_term'] :$data['utm_term']),
    'adgroup'      => ((isset($_GET['adgroup']))? $_GET['adgroup'] :$data['adgroup']),
    'matchtype'    => ((isset($_GET['matchtype']))? $_GET['matchtype'] :$data['matchtype']),
    'network'      => ((isset($_GET['network']))? $_GET['network'] :$data['network']),
    'device'       => ((isset($_GET['device']))? $_GET['device'] :$data['device'])); */
	 if(!is_user_logged_in()){
	$Data = $_COOKIE['utm_source'];
	$utm_source=($_GET['utm_source'])? $_GET['utm_source'] :$Data['utm_source'];
	 if(!isset($_COOKIE['utm_source'])) {

		setcookie('utm_source', $utm_source,time() + (86400 * 30), "/");
		$cookiesval='New';
		}

	 }
		/* echo "<pre>";

		print_r($_COOKIE);

		echo "</pre>";  */

	}


function getIDFCLog($_customer_user, $pro_id = '', $idfc_log = '')
{
    global $wpdb;
    $orderCount =0;
    if($_customer_user!=0 || $_customer_user!=''){
    $OrderCount = $wpdb->get_row("SELECT pm.meta_id  FROM `te_postmeta` pm
                                    INNER JOIN te_posts p ON p.ID=pm.post_id AND p.post_status='wc-completed'
                                  WHERE meta_key='_customer_user'    AND  meta_value=$_customer_user");

    $orderCount = count($OrderCount);
    }


   //echo "idfc_log=".$idfc_log.'/IDFC_DATE='.strtotime(IDFC_DATE).'/today='.strtotime(date('Y-m-d')).'/ordercount='.count($OrderCount).'/userid='.$_customer_user.'/proid='.$pro_id;




    if ($idfc_log == '' &&  strtotime(date('Y-m-d')) > strtotime(IDFC_DATE) &&  $orderCount == 0)
    {
         //echo "im in 1st".$idfc_log.'/'.$pro_id;  die;
         return TRUE;
    }
    else if ($idfc_log != '' && $idfc_log == $pro_id)
    {
         //echo "im in 2nd".$idfc_log.'/'.$pro_id;  die;
         return TRUE;
    }
    else
    {
         //echo "im in 3rd false";  die;
         return FALSE;
    }
}

add_action('wp_ajax_nopriv_set_card_name', 'set_card_name');
add_action('wp_ajax_set_card_name', 'set_card_name');


function set_card_name(){

    $status=0;
    if(isset($_POST['cardname']) && $_POST['cardname']=='10% Off on Debit Cards'){
       $status=1;
    }
 set_transient('IDFCStatus',$status, 600*60);
 wp_die();
}

add_action('admin_menu', 'lead_report');

function lead_report()
{
    add_menu_page('Lead Report', 'Lead Report', 'manage_options', 'download_lead_report', 'download_lead_report', '', '4');
}


function download_lead_report()
{
    ?>

        <div class="or-export" style="text-align: center;">
            <h2>Lead Export Report</h2>
            <form method="POST" action="#">
                <p>
                <labe>Enter Start Date</labe>
                <input type="date" class="start_date" name="start_date" value="<?php echo $_POST['start_date']; ?>" required>
                </p>
                <p>
                <labe>Enter End Date</labe>
                <input type="date" class="end_date" name="end_date" value="<?php echo $_POST['end_date']; ?>" required>
                </p>
                <input type="submit" id="export-lead" class="button" value="Export" name="export">
            </form>
        </div>


    <?php


	   if( isset($_POST['start_date']) ) {



			$date1 = new DateTime($_POST['start_date']);
			$date2 = new DateTime($_POST['end_date']);

			$diff = $date2->diff($date1)->format("%a");


			$stdate=strtotime($_POST['start_date']);
			$endate=strtotime($_POST['end_date']);

			 if($stdate>$endate)
			 {
				 echo '<p class="alert_message" style="color:red;text-align:  center;">* End date should be greater than or equal to starting date.</p>';
				 exit(0);
			 }

			 else if($diff>62)
			 {
				 echo '<p class=style="color:red;text-align:  center;">* You can generate a report maximum of 62 days. </p>';
				 exit(0);
			 }


			global $wpdb;

			$start_date = $_POST['start_date'];
			$end_date   = $_POST['end_date'];

			$sql = "SELECT
				l.lead_id,
				l.form_id,
				GROUP_CONCAT(l.field_number SEPARATOR '!---!') as field_number,
				GROUP_CONCAT(l.value SEPARATOR '*---*') as value,
				ld.date_created,
				ld.source_url
			FROM
				`te_rg_lead` ld
				 LEFT JOIN te_rg_lead_detail l ON l.lead_id = ld.id
			WHERE
				(date(ld.date_created) >= '".$start_date."' AND date(ld.date_created) <= '".$end_date."' )
			AND
			 (ld.`form_id` IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25) )
				AND (l.`field_number` IN(1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16))
			GROUP BY l.lead_id
			ORDER BY `ld`.`date_created` DESC";


			$results = $wpdb->get_results( $sql );

			$datas=array();
			foreach($results as $values) {

				$numbers = explode("!---!",$values->field_number);
				$value = explode("*---*",$values->value);
				$resultData = array_combine($numbers, $value);



				if($values->form_id == 22 || $values->form_id == 23 || $values->form_id == 24 || $values->form_id == 7 || $values->form_id == 12 ) {
					//$val1++;
					$datas[] = array(
						'Formid' => $values->form_id,
						'Form Name' => 'Article Detail',
						'Name' => $resultData[1],
						'Email' => $resultData[13],
						'Phone' => $resultData[3],
						'Utm Source' => $resultData[4],
						'Utm Medium' => $resultData[5],
						'Utm Campaign' => $resultData[6],
						'Utm Term' => $resultData[7],
						'Course Name' => $resultData[15],
						'Institute Name' => $resultData[16],
						'City' => $resultData[10],
						'Company' => $resultData[11],
						'Functional Area' => $resultData[12],
						'Education' => '',
						'Work Ex' => '',
						'Date' => $values->date_created,
						'Source URL' => $values->source_url,
						'Lead id' => $values->lead_id
					);
				}
				if($values->form_id == 1){

					$datas[] = array(
						'Formid' => $values->form_id,
						'Form Name' => 'Article Detail',
						'Name' => $resultData[3],
						'Email' => $resultData[9],
						'Phone' => $resultData[1],
						'Utm Source' => $resultData[10],
						'Utm Medium' => $resultData[11],
						'Utm Campaign' => $resultData[12],
						'Utm Term' => $resultData[13],
						'Course Name' => $resultData[15],
						'Institute Name' => $resultData[14],
						'City' => $resultData[6],
						'Company' => $resultData[7],
						'Functional Area' => $resultData[8],
						'Education' => '',
						'Work Ex' => '',
						'Date' => $values->date_created,
						'Source URL' => $values->source_url,
						'Lead id' => $values->lead_id
					);
				}
				if( $values->form_id == 4 || $values->form_id == 6 || $values->form_id == 2 ){

					$datas[] = array(
						'Formid' => $values->form_id,
						'Form Name' => 'Article Detail',
						'Name' => $resultData[1],
						'Email' => $resultData[8],
						'Phone' => $resultData[3],
						'Utm Source' => $resultData[9],
						'Utm Medium' => $resultData[10],
						'Utm Campaign' => $resultData[13],
						'Utm Term' => '',
						'Course Name' => '',
						'Institute Name' => '',
						'City' => $resultData[5],
						'Company' => $resultData[6],
						'Functional Area' => $resultData[7],
						'Education' => '',
						'Work Ex' => '',
						'Date' => $values->date_created,
						'Source URL' => $values->source_url,
						'Lead id' => $values->lead_id
					);
				}
				if($values->form_id == 5){

					$datas[] = array(
						'Formid' => $values->form_id,
						'Form Name' => 'Article Detail',
						'Name' => $resultData[1],
						'Email' => $resultData[11],
						'Phone' => $resultData[3],
						'Utm Source' => $resultData[12],
						'Utm Medium' => $resultData[13],
						'Utm Campaign' => $resultData[19],
						'Utm Term' => $resultData[15],
						'Course Name' => $resultData[6],
						'Institute Name' => $resultData[14],
						'City' => $resultData[8],
						'Company' => $resultData[9],
						'Functional Area' => $resultData[10],
						'Education' => '',
						'Work Ex' => '',
						'Date' => $values->date_created,
						'Source URL' => $values->source_url,
						'Lead id' => $values->lead_id
					);
				}
				if($values->form_id == 10){

					$datas[] = array(
						'Formid' => $values->form_id,
						'Form Name' => 'Article Detail',
						'Name' => $resultData[1],
						'Email' => $resultData[15],
						'Phone' => $resultData[3],
						'Utm Source' => $resultData[11],
						'Utm Medium' => $resultData[12],
						'Utm Campaign' => '',
						'Utm Term' => $resultData[14],
						'Course Name' => $resultData[6],
						'Institute Name' => $resultData[13],
						'City' => $resultData[8],
						'Company' => $resultData[9],
						'Functional Area' => $resultData[10],
						'Education' => '',
						'Work Ex' => '',
						'Date' => $values->date_created,
						'Source URL' => $values->source_url,
						'Lead id' => $values->lead_id
					);
				}
				if($values->form_id == 18){

					$datas[] = array(
						'Formid' => $values->form_id,
						'Form Name' => 'Article Detail',
						'Name' => $resultData[1],
						'Email' => $resultData[2],
						'Phone' => $resultData[4],
						'Utm Source' => $resultData[6],
						'Utm Medium' => $resultData[7],
						'Utm Campaign' => '',
						'Utm Term' => '',
						'Course Name' => '',
						'Institute Name' => '',
						'City' => '',
						'Company' => $resultData[3],
						'Functional Area' => '',
						'Education' => '',
						'Work Ex' => '',
						'Date' => $values->date_created,
						'Source URL' => $values->source_url,
						'Lead id' => $values->lead_id
					);

				}



			}

			foreach($datas as $record) {

				if($record['Formid']==23){
					$record['Form Name'] = "Article Details Bottom";
				}if($record['Formid']==24) {
					$record['Form Name'] = "Article Details Mobile";
					$record['Education'] = $data['Education'];
					$record['Work Ex'] = $data['Work Ex'];
				}if($record['Formid']==7) {
					$record['Form Name'] = "Landing Template";
				}if($record['Formid']==12){
					$record['Form Name'] = "Landing Template Mobile";
				}if($record['Formid']==6){
					$records['Utm Campaign'] = '';
				}

				$records[] = $record;
			}
			   header('Content-Type: text/csv; charset=utf-8');
				header('Content-Disposition: attachment; filename=lead-report.csv');
			   ob_end_clean();

				//$fh = @fopen('php://output', 'w' );
				$fh = fopen('php://output','.csv', 'w' );
			 fputcsv($fh, array(
					'Formid',
					'Form Name',
					'Name',
					'Email',
					'Phone',
					'Utm Source',
					'Utm Medium',
					'Utm Campaign',
					'Utm Term',
					'Course Name',
					'Institute Name',
					'City',
					'Company',
					'Functional Area',
					'Education',
					'Work Ex',
					'Date',
					'Source Url',
					'Lead id'
				));
			//$headerDisplayed = true;

			foreach ( $records as $data ) {

			  fputcsv($fh, $data);
			}


			// Close the file
			fclose($fh);


			// Make sure nothing else is sent, our file is done
			exit(0);


		}


}

add_action( 'wp_head', 'load_user_detail_new' );
function load_user_detail_new()
{
	global $current_user;

	$contact=get_user_meta($current_user->ID);
 	$contactno=$contact['phone_number'][0];
global $post;
$start_date=get_field('course_start_date', $post->ID);
	//39527
	if ( !is_user_logged_in()&& is_page('39527') ) {

		wp_redirect( get_home_url() );
    		exit;
	}
?>

		<script>
		jQuery(document).ready(function() {
        	jQuery('#input_9_15').val('<?php echo $start_date; ?>');
			jQuery('.gfield_list_40_cell3').children('input[type=text]').datepicker();
		jQuery('.gfield_list_40_cell4').children("input[type=text]").datepicker();


			jQuery('#input_27_8').val('<?php echo $current_user->user_firstname; ?>');
			jQuery('#input_27_9').val('<?php echo $current_user->user_lastname; ?>');
			jQuery('#input_27_45').val('<?php echo $current_user->user_email; ?>');
			jQuery('#input_27_50').val('<?php echo $contactno; ?>');
			jQuery('#input_27_61').attr('disabled','disabled');
		});
			var countryCodes = [];


countryCodes['Afghanistan']='93';

countryCodes['Albania']='355';
countryCodes['Algeria']='213';
countryCodes['American Samoa']='684';


countryCodes['Andorra']='376';
countryCodes['Angola']='244';
countryCodes['Antigua and Barbuda']='1-268';
countryCodes['Argentina']='54';
countryCodes['Armenia']='374';
countryCodes['Australia']='61';
countryCodes['Austria']='43';
countryCodes['Azerbaijan']='994';
countryCodes['Bahamas']='1-242';
countryCodes['Bahrain']='973';
countryCodes['Bangladesh']='880';
countryCodes['Barbados']='1-246';
countryCodes['Belarus']='375';

countryCodes['Belgium']='32';
countryCodes['Belize']='501';
countryCodes['Benin']='229';
countryCodes['Bermuda']='10441';
countryCodes['Bhutan']='975';
countryCodes['Bolivia']='591';
countryCodes['Bosnia and Herzegovina']='387';
countryCodes['Botswana']='267';
countryCodes['Brazil']='55';
countryCodes['Brunei']='673';
countryCodes['Bulgaria']='359';
countryCodes['Burkina Faso']='226';


countryCodes['Burundi']='257';
countryCodes['Cambodia']='855';
countryCodes['Cameroon']='237';
countryCodes['Canada']='1';
countryCodes['Cape Verde']='238';
countryCodes['Cayman Islands']='1-345';
countryCodes['Central African Republic']='236';
countryCodes['Chad']='235';
countryCodes['Chile']='56';
countryCodes['China']='86';
countryCodes['Colombia']='57';
countryCodes['Comoros']='269';

countryCodes['Congo, Democratic Republic of the']='243';
countryCodes['Congo, Republic of the']='242';
countryCodes['Costa Rica']='506';
countryCodes["Côte d'Ivoire"]='225';
countryCodes['Croatia']='385';
countryCodes['Cuba']='53';
countryCodes['Curaçao']='599';
countryCodes['Cyprus']='357';
countryCodes['Czech Republic']='420';
countryCodes['Denmark']='45';
countryCodes['Djibouti']='253';
countryCodes['Dominica']='1-767';
countryCodes['Dominican Republic']='1-809';
countryCodes['East Timor']='670';
countryCodes['Ecuador']='593';
countryCodes['Egypt']='20';
countryCodes['El Salvador']='503';
countryCodes['Equatorial Guinea']='240';
countryCodes['Eritrea']='291';
countryCodes['Estonia']='372';
countryCodes['Ethiopia']='251';
countryCodes['Faroe Islands']='298';
countryCodes['Fiji']='679';
countryCodes['Finland']='358';
countryCodes['France']='33';
countryCodes['French Polynesia']='689';
countryCodes['Gabon']='241';
countryCodes['Gambia']='220';
countryCodes['Georgia']='995';
countryCodes['Germany']='49';
countryCodes['Ghana']='233';
countryCodes['Greece']='30';
countryCodes['Greenland']='299';
countryCodes['Grenada']='1-473';
countryCodes['Guam']='1-671';
countryCodes['Guatemala']='502';
countryCodes['Guinea']='224';
countryCodes['Guinea-Bissau']='245';
countryCodes['Guyana']='592';
countryCodes['Haiti']='509';
countryCodes['Honduras']='504';
countryCodes['Hong Kong']='852';
countryCodes['Hungary']='36';
countryCodes['Iceland']='354';
countryCodes['India']='91';
countryCodes['Indonesia']='62';
console.log("array is"+countryCodes);

countryCodes['Iran']='98';
countryCodes['Iraq']='964';
countryCodes['Ireland']='353';
countryCodes['Israel']='972';
countryCodes['Italy']='39';
countryCodes['Jamaica']='1-876';
countryCodes['Japan']='81';
countryCodes['Jordan']='962';
countryCodes['Kazakhstan']='7';
countryCodes['Kenya']='254';
countryCodes['Kuwait']='96';
countryCodes['Kiribati']='686';
countryCodes['North Korea']='850';
countryCodes['South Korea']='82';
countryCodes['Kosovo']='381';
countryCodes['Kuwit']='965';
countryCodes['Kyrgyzstan']='996';
countryCodes['Laos']='856';
countryCodes['Latvia']='371';
countryCodes['Lebanon']='961';
countryCodes['Lesotho']='266';
countryCodes['Liberia']='231';
countryCodes['Libya']='218';
countryCodes['Liechtenstein']='423';
countryCodes['Lithuania']='370';
countryCodes['Luxembourg']='352';
countryCodes['Macedonia']='389';
countryCodes['Madagascar']='261';
countryCodes['Malawi']='265';
countryCodes['Malaysia']='60';
countryCodes['Maldives']='960';
countryCodes['Mali']='223';
countryCodes['Malta']='356';
countryCodes['Marshall Islands']='692';
countryCodes['Mauritania']='222';
countryCodes['Mauritius']='230';
countryCodes['Mexico']='52';
countryCodes['Micronesia']='691';
countryCodes['Moldova']='373';
countryCodes['Monaco']='377';
countryCodes['Mongolia']='976';
countryCodes['Montenegro']='382';
countryCodes['Morocco']='212';
countryCodes['Mozambique']='258';
countryCodes['Myanmar']='95';
countryCodes['Namibia']='264';
countryCodes['Nauru']='674';
countryCodes['Nepal']='977';
countryCodes['Netherlands']='31';
countryCodes['New Zealand']='64';
countryCodes['Nicaragua']='505';
countryCodes['Niger']='227';
countryCodes['Nigeria']='234';
countryCodes['Norway']='47';
countryCodes['Northern Mariana Islands']='1-670';
countryCodes['Oman']='968';
countryCodes['Pakistan']='92';
countryCodes['Palau']='680';
countryCodes['Palestine, State of']='970';
countryCodes['Panama']='507';
countryCodes['Papua New Guinea']='675';
countryCodes['Paraguay']='595';
countryCodes['Peru']='51';
countryCodes['Philippines']='63';
countryCodes['Poland']='48';
countryCodes['Portugal']='351';
countryCodes['Puerto Rico']='1-939';
countryCodes['Qatar']='974';
countryCodes['Romania']='40';
countryCodes['Russia']='7';
countryCodes['Rwanda']='250';
countryCodes['Saint Kitts and Nevis']='1-869';
countryCodes['Saint Lucia']='1-758';
countryCodes['Saint Vincent and the Grenadines']='1-784';
countryCodes['Samoa']='685';
countryCodes['San Marino']='378';
countryCodes['Sao Tome and Principe']='239';
countryCodes['Saudi Arabia']='966';
countryCodes['Senegal']='221';
countryCodes['Serbia']='381';
countryCodes['Montenegro']='381';
countryCodes['Seychelles']='248';
countryCodes['Sierra Leone']='232';
countryCodes['Singapore']='65';
countryCodes['Sint Maarten']='1';
countryCodes['Slovakia']='421';
countryCodes['Slovenia']='386';
countryCodes['Solomon Islands']='677';
countryCodes['Somalia']='252';
countryCodes['South Africa']='27';
countryCodes['Spain']='34';
countryCodes['Sri Lanka']='94';
countryCodes['Sudan']='249';
countryCodes['Sudan, South']='211';
countryCodes['Suriname']='597';
countryCodes['Swaziland']='268';
countryCodes['Sweden']='46';
countryCodes['Switzerland']='41';
countryCodes['Syria']='963';
countryCodes['Taiwan']='886';
countryCodes['Tajikistan']='992';
countryCodes['Tanzania']='255';
countryCodes['Thailand']='66';
countryCodes['Togo']='228';
countryCodes['Tonga']='676';
countryCodes['Trinidad and Tobago']='1-868';
countryCodes['Tunisia']='216';
countryCodes['Turkey']='90';
countryCodes['Turkmenistan']='993';
countryCodes['Tuvalu']='688';
countryCodes['Uganda']='256';
countryCodes['Ukraine']='380';
countryCodes['United Arab Emirates']='971';
countryCodes['United Kingdom']='44';
countryCodes['United States']='1';
countryCodes['Uruguay']='598';
countryCodes['Uzbekistan']='998';
countryCodes['Vanuatu']='678';
countryCodes['Vatican City']='379';
countryCodes['Venezuela']='58';
countryCodes['Vietnam']='84';
countryCodes['Virgin Islands, British']='1-284';
countryCodes['Virgin Islands, U.S.']='1-340';
countryCodes['Yemen']='967';
countryCodes['Zambia']='260';
countryCodes['Zimbabwe']='263';



	//add country dial code acc to selected country from dropdown

	jQuery(document).on('change','#input_27_35_6',function(){
		var country=	  jQuery(this).val();
		jQuery('#input_27_61').val(countryCodes[country]);
	});

	jQuery(document).on('change','#input_27_6_6',function(){

		/* var country=	  jQuery(this).val();
		jQuery('#input_27_61').val(countryCodes[country]); */

		//jQuery('#input_27_35_6').val(jQuery('#input_27_6_6').val());
		jQuery('#input_27_31_6').val(jQuery('#input_27_6_6').val());
		jQuery('#input_27_33_6').val(jQuery('#input_27_6_6').val());
		jQuery('#input_27_32_6').val(jQuery('#input_27_6_6').val());


	 });





 jQuery(document).bind('gform_page_loaded', function(event, form_id, current_page){

	if(form_id=="27")
	{

		if(current_page=="1")
		{

			jQuery('.step-chart').removeClass('step-2');
			jQuery('.step-chart').removeClass('step-3');

		}
		if(current_page=="2")
		{
			jQuery('.step-chart').removeClass('step-3');
			jQuery('.step-chart').addClass('step-2');

		}


		if(current_page=="3")
		{

			jQuery('.step-chart').removeClass('step-2');
			jQuery('.step-chart').addClass('step-3');

		}
	}
});
</script>
		<?php
	}

////Create Template column in page section
add_filter( 'manage_page_posts_columns', 'set_custom_template_columns' );
function set_custom_template_columns($columns) {

    $columns['template'] = __( 'Template', '' );

    return $columns;
}

add_filter( 'manage_articles_posts_columns', 'set_custom_course_columns' );
function set_custom_course_columns($columns) {

    $columns['course'] = __( 'Course', '' );

    return $columns;
}


add_action( 'manage_posts_custom_column' , 'custom_template_column_data', 10, 2 );
function custom_template_column_data( $column, $post_id ) {
    switch ( $column ) {

        case 'template' :

                 $file= get_page_template_slug( $post_id );
			   foreach (get_page_templates() as $key => $var)
			   {

				   if($file==$var)
					   echo $key;

			   }
			   break;
			  case 'course':

			  $file=get_post_meta($post_id,'select_course',true);

			$cname= get_post($file);


			if($file!=0)
			{
			$batchid     = get_post_meta($file,'batch_name',true);


			  echo $cname->post_title. " - " .$batchid;
			}
            break;

    }
}
		add_action( 'restrict_manage_posts', 'template_filter_dropdown' );
		add_filter( 'request',  'template_filter_post_list'  );


	function template_filter_dropdown()
	{


		if ( $GLOBALS['pagenow'] === 'upload.php' ) {
			return;
		}
	if($GLOBALS[_GET]['post_type']=='page')
	{
		$template = isset( $_GET['page_template_filter'] ) ? $_GET['page_template_filter'] : "all";
		$default_title = apply_filters( 'default_page_template_title',  __( 'Default Template' ), 'meta-box' );
		?>
		<select name="page_template_filter" id="page_template_filter">
			<option value="all">All Page Templates</option>
			<option value="default" <?php echo ( $template == 'default' )? ' selected="selected" ' : "";?>><?php echo esc_html( $default_title ); ?></option>
			<?php page_template_dropdown($template); ?>
		</select>

		<?php
	}

	if($GLOBALS[_GET]['post_type']=='articles')
	{
$course = isset( $_GET['page_course_filter'] ) ? $_GET['page_course_filter'] : "all";
		$default_title = apply_filters( 'default_page_course_title',  __( 'Default Course' ), 'meta-box' );

		$field=array();
		$courses = array(
        'post_type'      => 'product',
        'posts_per_page' => -1,
        'order'          => 'ASC',
        'orderby'        => 'title'
    );
    $course_detail = get_posts($courses);
	foreach ($course_detail as $team)
        {
    		$batchid     = get_post_meta($team->ID,'batch_name',true);
             $field['coursename'][$team->ID]   = $team->post_title. " - " .$batchid;
			// $field['coursename'][$team->ID]   = $team->post_title;
        }
   	?>
		<select name="page_course_filter" id="page_course_filter">
			<option value="all">All Courses</option>
		<?php foreach($field['coursename'] as $key=>$val)
			{ ?>
			<option value="<?php echo $key; ?>" <?php echo ( $course == $key )? ' selected="selected" ' : "";?> ><?php echo $val; ?></option>

		<?php	}?>
		</select>

		<?php
	}

	}//end func

	function template_filter_post_list( $vars ){

	//	if ( ! isset( $_GET['page_template_filter'] ) ) return $vars;

		//if ( ! isset( $_GET['page_course_filter'] ) ) return $vars;


		if(isset( $_GET['page_template_filter'] ))
		{
		$template = trim($_GET['page_template_filter']);



		if ( $template == "" || $template == 'all' ) return $vars;

		$vars = array_merge(
			$vars,
			array(
				'meta_query' => array(
					array(
						'key'     => '_wp_page_template',
						'value'   => $template,
						'compare' => '=',
					),
				),
			)
		);
		}

		if(isset( $_GET['page_course_filter'] ))
		{
		$template = trim($_GET['page_course_filter']);



		if ( $template == "" || $template == 'all' ) return $vars;

		$vars = array_merge(
			$vars,
			array(
				'meta_query' => array(
					array(
						'key'     => 'select_course',
						'value'   => $template,
						'compare' => '=',
					),
				),
			)
		);
		}


		return $vars;

	}


add_action('acf/input/admin_footer', 'testimonial_enqueue_scripts');
function testimonial_enqueue_scripts()
{
 ?>
	<script>
	jQuery('#acf-field_5a71a90d277a2').change(function(){
		jQuery('.acf-field-5a71a94c277a3').find('.acf-input').text('Please Wait.');
		let course_id=jQuery(this).val();
		let url="<?php echo admin_url( 'admin-ajax.php' ); ?>";
	    jQuery.ajax({
			type : "post",

			url : url,
			data : {
				action: "retreive_testimonials",
				course_id : course_id
			},
			success: function(response) {
				jQuery('.acf-field-5a71a94c277a3').find('.acf-input').text('');
				jQuery('.acf-field-5a71a94c277a3').find('.acf-input').text(response);

			}
      })

	});

	jQuery('#acf-field_5a71a99c277a4').change(function(){

			jQuery('.acf-field-5a71a9b9277a5').find('.acf-input').text('Please Wait...');
			let course_id=jQuery(this).val();
			let url="<?php echo admin_url( 'admin-ajax.php' ); ?>";
			jQuery.ajax({
				type : "post",

				url : url,
				data : {
					action: "retreive_alumni",
					course_id : course_id
				},
				success: function(response) {
					jQuery('.acf-field-5a71a9b9277a5').find('.acf-input').text('');
					jQuery('.acf-field-5a71a9b9277a5').find('.acf-input').text(response);

				}
		  })

	});
</script>


<?php
}


add_action( 'wp_ajax_retreive_testimonials', 'funct_retreive_testimonials' );
add_action( 'wp_ajax_nopriv_retreive_testimonials', 'funct_retreive_testimonials' );
add_action( 'wp_ajax_retreive_alumni', 'funct_retreive_alumni' );
add_action( 'wp_ajax_nopriv_retreive_alumni', 'funct_retreive_alumni' );

function funct_retreive_testimonials()
{
	$course_id=$_POST['course_id'];

	global $wpdb;

	$table_postmeta = $wpdb->prefix . "postmeta";

	$table_post=$wpdb->prefix . "posts";

	$query = "SELECT * FROM $table_postmeta
	RIGHT JOIN $table_post
	on $table_post.ID=$table_postmeta.post_id
	where $table_postmeta.meta_key='select_batch' && $table_postmeta.meta_value=$course_id ";

	$result=$wpdb->get_results($query,OBJECT);

	foreach($result as $val)
	{

		echo $val->post_title. ", ";
	}

		wp_die();
}

function funct_retreive_alumni()
{
 $course_id=$_POST['course_id'];
	global $wpdb;

   $table_postmeta = $wpdb->prefix . "postmeta";
   $table_post=$wpdb->prefix . "posts";

	$query = "SELECT * FROM $table_postmeta
	RIGHT JOIN $table_post
	on $table_post.ID=$table_postmeta.post_id
	where $table_postmeta.meta_key='course_assoociated' ";
	//echo $query;
	//select_institute
	$result=$wpdb->get_results($query,OBJECT);
	//print_r($result);
	foreach($result as $val)
	{
		$list_course=(unserialize($val->meta_value));


		if(in_array($course_id,$list_course))
		{

		echo $val->post_title. ", ";

		}

	}

	wp_die();
}

/*Chat lead into CRM- Prateek*/
add_action("wp_ajax_crm_chatlead_entry", "crm_chatleadft_entry");
add_action("wp_ajax_nopriv_crm_chatlead_entry", "crm_chatleadft_entry");
function crm_chatleadft_entry()
{
	if($_POST['email']){
     		$fname     = $_POST['first_name'];
    		$phone     = $_POST['mobile'];
    		$email     = $_POST['email'];
		$utmterm  = $_POST['utm_term'];
		$utmsource  = $_POST['utm_source'];
    		$curl_post_data = array(
        		'name' => $fname,
        		'email'      => $email,
        		'phone'     => $phone,
			'utm_term'  => $utmterm,
			'utm_source'  => $utmsource,
   		 );
		//print_r($curl_post_data);die();

    		$fields_string = http_build_query($curl_post_data);
    		//open connection
    		$ch = curl_init();
    		//set the url, number of POST vars, POST data
    		curl_setopt($ch, CURLOPT_URL, CRM_URL_BASE . "/index.php?entryPoint=lead-genration");
    		//curl_setopt($ch, CURLOPT_URL, "http://localhost/aws/index.php?entryPoint=lead-genration&");
    		curl_setopt($ch, CURLOPT_POST, count($curl_post_data));
    		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    		curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);
    		//execute post
    		$result = curl_exec($ch);
    		//close connection
   		// print_r($result); die;
   		curl_close($ch);
    		//return $result;
    		return $confirmation;
	}
}


function scholarship_lp_stylesheets() {
	if ( is_page( 'scholarships' )) {
    wp_enqueue_style( 'scholarship_lp_page',  get_template_directory_uri() .'/css/custom-lp-style.css?ver=1.2', array(), null, 'all' );
   //demo test git
   }
}
add_action( 'wp_enqueue_scripts', 'scholarship_lp_stylesheets' );

function wpb_scholarship_scripts() {
	if ( is_page( 'scholarships' )) {
		wp_register_script('scholarship_carousel', get_template_directory_uri() . '/js/owl.carousel_sch.js', array('jquery'),'1.1', true);
		wp_enqueue_script('scholarship_carousel');
     }
}
//add_action( 'wp_enqueue_scripts', 'wpb_scholarship_scripts' );
?>
